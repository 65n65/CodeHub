#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeHub.WebViews
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class MarkdownWebView : MarkdownWebViewBase
{

#line hidden

#line 1 "MarkdownWebView.cshtml"
public MarkdownModel Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("<html>\n<head>\n    <meta");

WriteLiteral(" name=\"viewport\"");

WriteLiteral(" content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable" +
"=0\"");

WriteLiteral("/>\n    <base");

WriteAttribute ("href", " href=\"", "\""

#line 5 "MarkdownWebView.cshtml"
, Tuple.Create<string,object,bool> ("", Model.BaseUrl

#line default
#line hidden
, false)
);
WriteLiteral(" />\n    <style>\n    * {\n        box-sizing: border-box;\n    }\n\n    html {\n       " +
" -webkit-text-size-adjust: none;\n    }\n\n    body {\n        color: #333;\n        " +
"font-family: Helvetica, Arial, sans-serif;\n        line-height: 1.42;\n        fo" +
"nt-size: ");


#line 19 "MarkdownWebView.cshtml"
               Write(Model.FontSize);


#line default
#line hidden
WriteLiteral("px;\n        line-height: 1.7;\n        overflow: hidden;\n        word-wrap: break-" +
"word;\n    }\n    h1, h2, h3, h4, h5, h6 {\n    margin: 1em 0 15px;\n    padding: 0;" +
"\n    font-weight: bold;\n    line-height: 1.7;\n    cursor: text;\n    position: re" +
"lative;\n    }\n    h1 {\n    font-size: 1.8em;\n    border-bottom: 1px solid #ddd;\n" +
"    }\n    p, blockquote, ul, ol, dl, table, pre {\n    margin: 15px 0;\n    }\n    " +
"h2 {\n    font-size: 1.4em;\n    border-bottom: 1px solid #eee;\n    }\n    ul, ol {" +
"\n    padding-left: 20px;\n    }\n    a {\n    color: #4183c4;\n    text-decoration: " +
"none;\n    text-decoration: none;\n    }\n    .highlight pre, pre {\n    background-" +
"color: #f8f8f8;\n    border: 1px solid #ddd;\n    line-height: 19px;\n    overflow:" +
" auto;\n    padding: 6px 10px;\n    border-radius: 3px;\n    }\n    pre {\n    word-w" +
"rap: normal;\n    }\n    dl {\n    padding: 0;\n    }\n    dl dt {\n    font-weight: b" +
"old;\n    font-style: italic;\n    padding: 0;\n    margin-top: 15px;\n    }\n    dl " +
"dd {\n    margin-bottom: 15px;\n    padding: 0 15px;\n    }\n    table {\n    width: " +
"100%;\n    overflow: auto;\n    display: block;\n    }\n    table tr {\n    border-to" +
"p: 1px solid #ccc;\n    background-color: #fff;\n    }\n    table tr:nth-child(2n) " +
"{\n    background-color: #f8f8f8;\n    }\n    table th, table td {\n    border: 1px " +
"solid #ddd;\n    padding: 6px 13px;\n    }\n    table th {\n    font-weight: bold;\n " +
"   }\n    img {\n    max-width: 100%;\n    -moz-box-sizing: border-box;\n    box-siz" +
"ing: border-box;\n    }\n    ul.task-list > li.task-list-item {\n      list-style-t" +
"ype: none;\n    }\n    .task-list-item-checkbox {\n      margin-left: -20px;\n      " +
"vertical-align: middle;\n    }\n    </style>\n");


#line 107 "MarkdownWebView.cshtml"
    

#line default
#line hidden

#line 107 "MarkdownWebView.cshtml"
     if (Model.ContinuousResize) {


#line default
#line hidden
WriteLiteral(@"        <script>
        function size() { return document.body.scrollHeight; }
        function rs() { document.location.href = 'app://resize'; }; window.onsize = rs;
        var h = 0; setInterval(function() { if (size() != h) { h = size(); rs(); } }, 300);
        </script>
");


#line 113 "MarkdownWebView.cshtml"
    }


#line default
#line hidden
WriteLiteral("    <title>Readme</title>\n</head>\n<body>\n");


#line 117 "MarkdownWebView.cshtml"
    

#line default
#line hidden

#line 117 "MarkdownWebView.cshtml"
      WriteLiteral(Model.Body);

#line default
#line hidden
WriteLiteral("\n</body>\n</html>");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class MarkdownWebViewBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the 
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
